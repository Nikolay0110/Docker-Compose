version: '3.9'
services:
  postgresql:
    # Всегда указывать версию, не latest, так как при ребилде загрузится последняя и отличная от текущей версия
    image: postgres:16
    # Указать логическое имя контейнера, для какого сервиса запущен данный контейнер
    container_name: postgres-name_service
    # Переменные окружения нужны только 1 раз, на момент первого запуска docker-compose файла
    # Далее нужно конфиденциальные данные удалить
    environment:
      # Указать имя дефолтной базы с логическим соответствием имени сервиса
      POSTGRES_DB: "service_name"
      # Дефолтное имя суперюзера для БД, не менять
      POSTGRES_USER: "postgres"
      # !!! После успешного билда стереть пароль, при ребилде его не нужно указывать
      POSTGRES_PASSWORD: "password"
      # Путь к директории с данными БД в контейнере, по дефолту
      PGDATA: "/var/lib/postgresql/data/pgdata"
      # Временная зона, что бы не было сдвига по времени
      TZ: "Europe/Moscow"
    volumes:
      # Первый вариант - если по тз нужно сохранить все на отдельном диске, то помещаем в его директорию docker-compose.yml и запускаем оттуда
      # Второй вариант - указать абсолютный путь к папке на диске и поместить скрипт в /opt/docker/postgres
      - './postgres/:/var/lib/postgresql/data'
      # В данной конфигурации мы будем менять конфиги в подключенной директории, но можно и отдельно конфиги подключить
#      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf
#      - ./postgresql.conf:/etc/postgresql.conf # выбираем свой конфиг, в котором мы ссылаемся на новый файл конфигурации pg_hba.conf права на файлы конфигурации ставить 644
    # Раскомментировать, если мы подключили конфиги как указанно выше
#    command: ["postgres", "-c", "config_file=/etc/postgresql.conf"]
    # Все стандартно - host:container
    ports:
      - "5432:5432"
    # Контроль здоровья
    healthcheck:
      # Команда для проверки работоспособности БД, указать свое имя базы данных указанное в POSTGRES_DB
      test: ["CMD-SHELL", "pg_isready -U postgres -d db_name"]
      # Период проверки работоспособности БД
      interval: 30s
      # Время ожидания ответа от БД
      timeout: 5s
      # Количество попыток проверки
      retries: 5
      # Период задержки healthcheck при запуске БД
      start_period: 10s
    # Перезапуск контейнера если в его работе будут ошибки, обязательное условие
    restart: unless-stopped
    networks:
      # Задать логической имя сети для данного сервиса
      name_service_network:
        # Задать статический адрес в подсети, не обязательно, но для ИБ будет проще отследить виновника при инциденте
        ipv4_address: 192.168.248.2
    deploy:
      resources:
        # Лимит ресурсов для контейнера
        limits:
          # Количество ядер CPU для контейнера
          cpus: "2"
          # В конфиге postgresql.conf - shared_buffer указывать 25% от текущего ограничения memory
          memory: 4G

networks:
  name_service_network:
    name: name_service_network
    ipam:
      config:
        # Подсеть и адрес для данной сети
        - subnet: 192.168.248.0/24
